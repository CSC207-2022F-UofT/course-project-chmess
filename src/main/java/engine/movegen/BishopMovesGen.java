package engine.movegen;

import engine.entities.Board;
import engine.entities.Piece;
import engine.move.Move;

import java.util.List;
/**
 * Contains a single method which creates list of possible moves
 * a bishop can make which is later refined by PostMoveValidator.
 */
public class BishopMovesGen extends MovesGenerator {
    /**
     * Finds all possible moves a bishop can make, up to seven tiles
     * in any diagonal. Any moves which jump over a piece,
     * are not on the board, or are occupied by a friendly
     * piece are removed from the list. King checks are NOT
     * considered at this stage.
     *
     * @param board the board on which moves are generated
     * @param bishop the bishop piece for which moves are generated
     * @return the list of possible moves
     */
    @Override
    public List<Move> generate (Board board, Piece bishop) {
        int[] origin = bishop.getCoords();
        //The coordinate changes corresponding to each of the diagonals along which
        //bishops can move
        int[][] directions = {{-1, 1}, {1, 1}, {1, -1}, {-1, -1}};
        //Moves generated by helper method in MovesGenerator and returned
        return genStraightLineMoves(origin, directions, board);
    }
}
